

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Lemon</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-03-10T03:57:11+08:00</updated>
  <author>
    <name>lemon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2025 lemon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>GaussDB在导入数据时给定唯一主键id</title>
    <link href="http://localhost:4000/posts/daoru-shuju-shengchengid/" rel="alternate" type="text/html" title="GaussDB在导入数据时给定唯一主键id" />
    <published>2024-12-16T13:47:00+08:00</published>
  
    <updated>2024-12-16T13:47:00+08:00</updated>
  
    <id>http://localhost:4000/posts/daoru-shuju-shengchengid/</id>
    <content src="http://localhost:4000/posts/daoru-shuju-shengchengid/" />
    <author>
      <name>Lemon</name>
    </author>

  
    
    <category term="Knowledge" />
    
    <category term="GaussDB" />
    
  

  
    <summary>
      





      在要导入数据的表中增加create_time字段，默认值设置为pg_systimestamp()，在从csv文件导入数据的时候会自动给create_time字段插入时间戳。然后将时间戳转为纯数字字符串即可。
SELECT REPLACE(EXTRACT(EPOCH FROM create_time::TIMESTAMP)::VARCHAR, '.', '') FROM test_table tt;

UPDATE test_table SET id = REPLACE(EXTRACT(EPOCH FROM create_time::TIMESTAMP)::VARCHAR, '.', '');


    </summary>
  

  </entry>

  
  <entry>
    <title>使用Rclone迁移对象存储数据</title>
    <link href="http://localhost:4000/posts/rclone/" rel="alternate" type="text/html" title="使用Rclone迁移对象存储数据" />
    <published>2024-10-28T13:47:00+08:00</published>
  
    <updated>2024-10-28T13:47:00+08:00</updated>
  
    <id>http://localhost:4000/posts/rclone/</id>
    <content src="http://localhost:4000/posts/rclone/" />
    <author>
      <name>Lemon</name>
    </author>

  
    
    <category term="Knowledge" />
    
    <category term="OSS" />
    
  

  
    <summary>
      





      一、安装Rclone
下载地址：https://rclone.org/downloads/。

二、启动
解压下载的压缩包，进到Rclone根目录，使用以下命令启动。
# 不带账号密码启动
rclone rcd --rc-web-gui
# 带账号密码启动
rclone rcd --rc-web-gui --rc-user me --rc-pass mypassword

启动后会自动下载页面文件到C:\Users\admin\AppData\Local\rclone目录下，启动成功后自动跳转到浏览器，可以在浏览器页面进行查看、下载OSS文件等操作。

三、配置OSS连接
打开C:\Users\admin\AppData\Roaming\rclone目录下的rclone.conf文件，没有的话新建一个，写入以下OSS配置，以下为多个OSS的配置。
[remote]
type = s3...
    </summary>
  

  </entry>

  
  <entry>
    <title>山西 - 云冈石窟</title>
    <link href="http://localhost:4000/posts/yungangshiku/" rel="alternate" type="text/html" title="山西 - 云冈石窟" />
    <published>2024-10-08T10:47:00+08:00</published>
  
    <updated>2024-10-08T10:47:00+08:00</updated>
  
    <id>http://localhost:4000/posts/yungangshiku/</id>
    <content src="http://localhost:4000/posts/yungangshiku/" />
    <author>
      <name>Lemon</name>
    </author>

  
    
    <category term="Collection" />
    
    <category term="Travel" />
    
  

  
    <summary>
      





      

    </summary>
  

  </entry>

  
  <entry>
    <title>Redis缓存的雪崩、击穿、穿透</title>
    <link href="http://localhost:4000/posts/redishuancun-xuebeng/" rel="alternate" type="text/html" title="Redis缓存的雪崩、击穿、穿透" />
    <published>2024-09-12T13:47:00+08:00</published>
  
    <updated>2024-09-12T13:47:00+08:00</updated>
  
    <id>http://localhost:4000/posts/redishuancun-xuebeng/</id>
    <content src="http://localhost:4000/posts/redishuancun-xuebeng/" />
    <author>
      <name>Lemon</name>
    </author>

  
    
    <category term="Knowledge" />
    
    <category term="Redis" />
    
  

  
    <summary>
      





      缓存雪崩

缓存雪崩是指在某个时间点，大量的缓存数据同时失效或过期，导致大量的请求直接打到数据库或后端系统，从而造成数据库负载激增，甚至导致数据库宕机或系统崩溃的现象。


  合理设置缓存的过期时间：将缓存的过期时间分散设置，避免大量缓存在同一时间过期。可以使用随机时间，或者将过期时间分布在一个时间段内。
  实现缓存数据的自动刷新：确保热点数据在即将过期时能够自动刷新，避免数据大规模失效。
  多级缓存：使用多级缓存，将热点数据缓存在多个层次，例如内存缓存、分布式缓存，以减轻缓存层的负担。
  限流和熔断：实施请求限流和服务熔断，避免大量请求同时打到后端系统。
  监控和报警：建立监控系统，实时监测缓存和后端系统的状态，及时发现问题并采取措施。


缓存穿透

缓存和数据库中都没有的数据，可用户还是源源不断的发起请求，导致每次请求都会到数据库，从而压垮数据库。比如客户查询一个根本...
    </summary>
  

  </entry>

  
  <entry>
    <title>线程池</title>
    <link href="http://localhost:4000/posts/xianchengchi/" rel="alternate" type="text/html" title="线程池" />
    <published>2024-09-12T11:47:00+08:00</published>
  
    <updated>2024-09-12T11:47:00+08:00</updated>
  
    <id>http://localhost:4000/posts/xianchengchi/</id>
    <content src="http://localhost:4000/posts/xianchengchi/" />
    <author>
      <name>Lemon</name>
    </author>

  
    
    <category term="Knowledge" />
    
    <category term="Java" />
    
  

  
    <summary>
      





      线程池的五种状态


  RUNNING：线程池处于运行状态，能够接收新任务并处理队列中的任务。
  SHUTDOWN：线程池处于关闭状态，不再接收新任务，但会处理队列中的剩余任务。
  STOP：线程池处于停止状态，不再接收新任务，并中断正在执行的任务。
  TIDYING：线程池中的所有任务执行完毕，活动线程数为0时的状态。
  TERMINATED：线程池执行完terminated()方法后的状态。


每种状态的定义和转换条件


  RUNNING：线程池创建后默认进入此状态，能够接收新任务并处理队列中的任务。
  SHUTDOWN：调用shutdown()方法后，线程池进入此状态，不再接收新任务，但会处理队列中的剩余任务。
  STOP：调用shutdownNow()方法后，线程池进入此状态，不再接收新任务，并中断正在执行的任务。
  TIDYING：所有任务执行完毕后，...
    </summary>
  

  </entry>

</feed>


